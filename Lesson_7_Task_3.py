# 3). Массив размером 2m + 1, где m — натуральное число, заполнен случайным образом.
# Найдите в массиве медиану. Медианой называется элемент ряда,
# делящий его на две равные части: в одной находятся элементы, которые не меньше медианы,
# в другой — не больше медианы.
#
# Примечание: задачу можно решить без сортировки исходного массива.
# Но если это слишком сложно, используйте метод сортировки,
# который не рассматривался на уроках (сортировка слиянием также недопустима).

import random
from statistics import median

M = 15

ARR = [random.randint(0, 5) for _ in range(2 * M + 1)]
print(ARR, "массив изначально")
print("-" * 100)
print(sorted(ARR), "массив после встроенной сортировки")


def get_median(arr_):
    """Возвращает медиану списка"""
    m = len(arr_) // 2      # снова рассчитываем m
    for i in arr_:
        more = less = 0     # сохраняем в переменные значения больших и меньших элементов
        for k in range(2 * m + 1):
            if i > arr_[k]:
                less += 1       #
            elif i < arr_[k]:
                more += 1
        if less <= m and more <= m:     # если подмассивы слева и справа от предполагаемой медианы не превышает m,
            return i                    # то i - медиана. Таким образом, даже не нужно считать кол-во эквивалентных элементов


def method_check(func, arr_):
    """Проверяет, находит ли функция медиану"""
    if func(arr_) == median(arr_):
        print(f"Алгоритм {func}  работает")
        print("медиана найдена, это ", median(arr_))
        return True
    else:
        print("Алгоритм не работает")
        return False


print("ш" * 100)
method_check(get_median, ARR)
# Судя по всему, эта функция может найти медиану за небольшое кол-во проходов,
print("ш" * 100)