# 1). Отсортируйте по убыванию методом пузырька одномерный целочисленный массив,
# заданный случайными числами на промежутке [-100; 100).
# Выведите на экран исходный и отсортированный массивы.
# Примечания:
# ● алгоритм сортировки должен быть в виде функции, которая принимает на вход массив данных,
# ● постарайтесь сделать алгоритм умнее, но помните, что у вас должна остаться сортировка пузырьком.
# Улучшенные версии сортировки, например, расчёской, шейкерная и другие в зачёт не идут.

import random

ARR = [random.randint(-100, 99) for _ in range(10)]
print(ARR, "массив изначально")
print(sorted(ARR, reverse=True), " реверсированный массив после встроенной сортировки")


def bubble_trouble(array):
    n = 1
    while n < len(array):
        spam = False            # переменная для оценки статуса - были ли перестановки элементов при проходе
        for i in range(len(array) - n):     # немного улучшили алгоритм - сокращаем пробег на единицу в каждом цикле
            if array[i] < array[i + 1]:
                array[i], array[i + 1] = array[i + 1], array[i]
                spam = True
        if not spam:            # если перестановок за проход в цикле FOR не было -> список уже отсортирован.
            break
        n += 1


def method_check(func, arr):
    """Проверяет, правильно ли сортирует функция заданный массив"""
    array_copy = arr[:]
    func(arr)
    if arr == sorted(array_copy, reverse=True):
        print(f"Алгоритм {func} работает")
        print(arr, " - результат сортировки данным алгоритмом")
        return True
    else:
        print("Алгоритм не работает")
        return False


print("v" * 100)
method_check(bubble_trouble, ARR)
print("v" * 100)
